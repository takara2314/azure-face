# 9月29日(火)にこのOneNoteを基に、対面での勉強会を開きます。

# 今回の勉強会の目標
# 様々な顔が映っている画像から、AzureのAPIを用いて顔を識別できるようになる！

# 流れ
# AzureのFaceAPIを利用できるように、リソースを作成する
# ↓
# OpenCVで画像から顔の部分を人数分トリミングさせる
# ↓
# Azureに顔をアップロードし、学習を行わせる
# ↓
# 同じ人が映っている別の画像をAzureにアップロードし、きちんと識別できるかテストする

# 今回使用する画像
# [学習用画像1]
# [学習用画像2]
# [学習用画像3]
# [学習用画像4]
# [学習用画像5]
# [学習用画像6]
# [学習用画像7]
# [学習用画像8]
# [学習用画像9]
# [学習用画像10]
# [テスト画像1]
# [テスト画像2]
# [テスト画像3]

# 今回の勉強会で書くコードはGitHubにあげてあります
# ダウンロードしておいてください。
# https://github.com/takara2314/azure-face/
# (まだレポジトリは作成していないので、アクセスしても404)


# 1 AzureのAPIを利用できるようにする
# 各自Azureでリソースを作成し、FaceAPIを利用できる状態にしてください。

# 2 皆さんはPythonをどこまで書けますか
# もし自信がない方は、同じセクションのページに「Python 頻繁に使う処理・文法まとめ」がありますので、そちらを参考にしながら進めてください。

# 3 OpenCVで顔の部分をトリミングする
# ./azure-face/trimming.py のプログラムのようにトリミングのプログラムを書きます。
# (対面でコードの説明)

# 4 Azureに顔画像をアップロードし、顔IDを受け取る
# ./azure-face/train-upload.py のプログラムのようにAzureに学習用のプログラムを書きます。
# (対面でコードの説明)

# 5 顔IDを記録する
# 本来ならデータベースに顔IDを格納し、プログラムが参照しやすくしますが、内容が格段に濃くなるので、今回はデータベースを用いません。

# 6 同じ人が映っている別の画像をAzureにアップロードし、顔IDを受け取る
# 手順3でやったとおりに顔の部分をトリミングしてから、Azureに顔写真をアップロードし、顔IDを受け取ります。
# この顔IDが一致すれば、同じ人物と言えます。